// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PlatformData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PlatformData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PlatformData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PlatformData", id.toString(), this);
    }
  }

  static load(id: string): PlatformData | null {
    return changetype<PlatformData | null>(store.get("PlatformData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ref", Value.fromString(""));
    this.set("address", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("decimals", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("depositsEnabled", Value.fromBoolean(false));
    this.set("withdrawalsEnabled", Value.fromBoolean(false));
    this.set("LPEnabled", Value.fromBoolean(false));
    this.set("bridgingEnabled", Value.fromBoolean(false));
    this.set("biosRewardWeight", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ref(): string {
    let value = this.get("ref");
    return value!.toString();
  }

  set ref(value: string) {
    this.set("ref", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get depositsEnabled(): boolean {
    let value = this.get("depositsEnabled");
    return value!.toBoolean();
  }

  set depositsEnabled(value: boolean) {
    this.set("depositsEnabled", Value.fromBoolean(value));
  }

  get withdrawalsEnabled(): boolean {
    let value = this.get("withdrawalsEnabled");
    return value!.toBoolean();
  }

  set withdrawalsEnabled(value: boolean) {
    this.set("withdrawalsEnabled", Value.fromBoolean(value));
  }

  get LPEnabled(): boolean {
    let value = this.get("LPEnabled");
    return value!.toBoolean();
  }

  set LPEnabled(value: boolean) {
    this.set("LPEnabled", Value.fromBoolean(value));
  }

  get bridgingEnabled(): boolean {
    let value = this.get("bridgingEnabled");
    return value!.toBoolean();
  }

  set bridgingEnabled(value: boolean) {
    this.set("bridgingEnabled", Value.fromBoolean(value));
  }

  get biosRewardWeight(): BigInt {
    let value = this.get("biosRewardWeight");
    return value!.toBigInt();
  }

  set biosRewardWeight(value: BigInt) {
    this.set("biosRewardWeight", Value.fromBigInt(value));
  }
}

export class StrategyIntegration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("strategy", Value.fromString(""));
    this.set("integration", Value.fromString(""));
    this.set("pool", Value.fromBigInt(BigInt.zero()));
    this.set("weight", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StrategyIntegration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StrategyIntegration entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StrategyIntegration", id.toString(), this);
    }
  }

  static load(id: string): StrategyIntegration | null {
    return changetype<StrategyIntegration | null>(
      store.get("StrategyIntegration", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    return value!.toString();
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get integration(): string {
    let value = this.get("integration");
    return value!.toString();
  }

  set integration(value: string) {
    this.set("integration", Value.fromString(value));
  }

  get pool(): BigInt {
    let value = this.get("pool");
    return value!.toBigInt();
  }

  set pool(value: BigInt) {
    this.set("pool", Value.fromBigInt(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    return value!.toBigInt();
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }
}

export class StrategyTokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("strategy", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StrategyTokenBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StrategyTokenBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StrategyTokenBalance", id.toString(), this);
    }
  }

  static load(id: string): StrategyTokenBalance | null {
    return changetype<StrategyTokenBalance | null>(
      store.get("StrategyTokenBalance", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    return value!.toString();
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Strategy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("tokens", Value.fromStringArray(new Array(0)));
    this.set("strategyYield", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Strategy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Strategy entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Strategy", id.toString(), this);
    }
  }

  static load(id: string): Strategy | null {
    return changetype<Strategy | null>(store.get("Strategy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get totalBalances(): Array<string> {
    let value = this.get("totalBalances");
    return value!.toStringArray();
  }

  set totalBalances(value: Array<string>) {
    this.set("totalBalances", Value.fromStringArray(value));
  }

  get integrations(): Array<string> {
    let value = this.get("integrations");
    return value!.toStringArray();
  }

  set integrations(value: Array<string>) {
    this.set("integrations", Value.fromStringArray(value));
  }

  get users(): Array<string> {
    let value = this.get("users");
    return value!.toStringArray();
  }

  set users(value: Array<string>) {
    this.set("users", Value.fromStringArray(value));
  }

  get strategyYield(): string {
    let value = this.get("strategyYield");
    return value!.toString();
  }

  set strategyYield(value: string) {
    this.set("strategyYield", Value.fromString(value));
  }
}

export class StrategyYield extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("strategy", Value.fromString(""));
    this.set("totalHarvestedAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalDistributedAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalBiosBuyBackAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalTreasuryAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalProtocolAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalStrategyAmount", Value.fromBigInt(BigInt.zero()));
    this.set("lastDistributedAmount", Value.fromBigInt(BigInt.zero()));
    this.set("lastBiosBuyBackAmount", Value.fromBigInt(BigInt.zero()));
    this.set("lastTreasuryAmount", Value.fromBigInt(BigInt.zero()));
    this.set("lastProtocolAmount", Value.fromBigInt(BigInt.zero()));
    this.set("lastStrategyAmount", Value.fromBigInt(BigInt.zero()));
    this.set("lastDistributionBlock", Value.fromBigInt(BigInt.zero()));
    this.set("lastDistributionTime", Value.fromBigInt(BigInt.zero()));
    this.set("lastEffectiveAPRX1000", Value.fromBigInt(BigInt.zero()));
    this.set("lastEffectiveAPRX10000", Value.fromBigInt(BigInt.zero()));
    this.set("recentEffectiveAPRX10000", Value.fromBigIntArray(new Array(0)));
    this.set("averageEffectiveAPRX10000", Value.fromBigInt(BigInt.zero()));
    this.set("firstDistributionBlock", Value.fromBigInt(BigInt.zero()));
    this.set("firstDistributionTime", Value.fromBigInt(BigInt.zero()));
    this.set("lastPeriod", Value.fromBigInt(BigInt.zero()));
    this.set("averagePeriod", Value.fromBigInt(BigInt.zero()));
    this.set("distributionCount", Value.fromBigInt(BigInt.zero()));
    this.set("pendingDistributionAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StrategyYield entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StrategyYield entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StrategyYield", id.toString(), this);
    }
  }

  static load(id: string): StrategyYield | null {
    return changetype<StrategyYield | null>(store.get("StrategyYield", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    return value!.toString();
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get totalHarvestedAmount(): BigInt {
    let value = this.get("totalHarvestedAmount");
    return value!.toBigInt();
  }

  set totalHarvestedAmount(value: BigInt) {
    this.set("totalHarvestedAmount", Value.fromBigInt(value));
  }

  get totalDistributedAmount(): BigInt {
    let value = this.get("totalDistributedAmount");
    return value!.toBigInt();
  }

  set totalDistributedAmount(value: BigInt) {
    this.set("totalDistributedAmount", Value.fromBigInt(value));
  }

  get totalBiosBuyBackAmount(): BigInt {
    let value = this.get("totalBiosBuyBackAmount");
    return value!.toBigInt();
  }

  set totalBiosBuyBackAmount(value: BigInt) {
    this.set("totalBiosBuyBackAmount", Value.fromBigInt(value));
  }

  get totalTreasuryAmount(): BigInt {
    let value = this.get("totalTreasuryAmount");
    return value!.toBigInt();
  }

  set totalTreasuryAmount(value: BigInt) {
    this.set("totalTreasuryAmount", Value.fromBigInt(value));
  }

  get totalProtocolAmount(): BigInt {
    let value = this.get("totalProtocolAmount");
    return value!.toBigInt();
  }

  set totalProtocolAmount(value: BigInt) {
    this.set("totalProtocolAmount", Value.fromBigInt(value));
  }

  get totalStrategyAmount(): BigInt {
    let value = this.get("totalStrategyAmount");
    return value!.toBigInt();
  }

  set totalStrategyAmount(value: BigInt) {
    this.set("totalStrategyAmount", Value.fromBigInt(value));
  }

  get lastDistributedAmount(): BigInt {
    let value = this.get("lastDistributedAmount");
    return value!.toBigInt();
  }

  set lastDistributedAmount(value: BigInt) {
    this.set("lastDistributedAmount", Value.fromBigInt(value));
  }

  get lastBiosBuyBackAmount(): BigInt {
    let value = this.get("lastBiosBuyBackAmount");
    return value!.toBigInt();
  }

  set lastBiosBuyBackAmount(value: BigInt) {
    this.set("lastBiosBuyBackAmount", Value.fromBigInt(value));
  }

  get lastTreasuryAmount(): BigInt {
    let value = this.get("lastTreasuryAmount");
    return value!.toBigInt();
  }

  set lastTreasuryAmount(value: BigInt) {
    this.set("lastTreasuryAmount", Value.fromBigInt(value));
  }

  get lastProtocolAmount(): BigInt {
    let value = this.get("lastProtocolAmount");
    return value!.toBigInt();
  }

  set lastProtocolAmount(value: BigInt) {
    this.set("lastProtocolAmount", Value.fromBigInt(value));
  }

  get lastStrategyAmount(): BigInt {
    let value = this.get("lastStrategyAmount");
    return value!.toBigInt();
  }

  set lastStrategyAmount(value: BigInt) {
    this.set("lastStrategyAmount", Value.fromBigInt(value));
  }

  get lastDistributionBlock(): BigInt {
    let value = this.get("lastDistributionBlock");
    return value!.toBigInt();
  }

  set lastDistributionBlock(value: BigInt) {
    this.set("lastDistributionBlock", Value.fromBigInt(value));
  }

  get lastDistributionTime(): BigInt {
    let value = this.get("lastDistributionTime");
    return value!.toBigInt();
  }

  set lastDistributionTime(value: BigInt) {
    this.set("lastDistributionTime", Value.fromBigInt(value));
  }

  get lastEffectiveAPRX1000(): BigInt {
    let value = this.get("lastEffectiveAPRX1000");
    return value!.toBigInt();
  }

  set lastEffectiveAPRX1000(value: BigInt) {
    this.set("lastEffectiveAPRX1000", Value.fromBigInt(value));
  }

  get lastEffectiveAPRX10000(): BigInt {
    let value = this.get("lastEffectiveAPRX10000");
    return value!.toBigInt();
  }

  set lastEffectiveAPRX10000(value: BigInt) {
    this.set("lastEffectiveAPRX10000", Value.fromBigInt(value));
  }

  get recentEffectiveAPRX10000(): Array<BigInt> {
    let value = this.get("recentEffectiveAPRX10000");
    return value!.toBigIntArray();
  }

  set recentEffectiveAPRX10000(value: Array<BigInt>) {
    this.set("recentEffectiveAPRX10000", Value.fromBigIntArray(value));
  }

  get averageEffectiveAPRX10000(): BigInt {
    let value = this.get("averageEffectiveAPRX10000");
    return value!.toBigInt();
  }

  set averageEffectiveAPRX10000(value: BigInt) {
    this.set("averageEffectiveAPRX10000", Value.fromBigInt(value));
  }

  get firstDistributionBlock(): BigInt {
    let value = this.get("firstDistributionBlock");
    return value!.toBigInt();
  }

  set firstDistributionBlock(value: BigInt) {
    this.set("firstDistributionBlock", Value.fromBigInt(value));
  }

  get firstDistributionTime(): BigInt {
    let value = this.get("firstDistributionTime");
    return value!.toBigInt();
  }

  set firstDistributionTime(value: BigInt) {
    this.set("firstDistributionTime", Value.fromBigInt(value));
  }

  get lastPeriod(): BigInt {
    let value = this.get("lastPeriod");
    return value!.toBigInt();
  }

  set lastPeriod(value: BigInt) {
    this.set("lastPeriod", Value.fromBigInt(value));
  }

  get averagePeriod(): BigInt {
    let value = this.get("averagePeriod");
    return value!.toBigInt();
  }

  set averagePeriod(value: BigInt) {
    this.set("averagePeriod", Value.fromBigInt(value));
  }

  get distributionCount(): BigInt {
    let value = this.get("distributionCount");
    return value!.toBigInt();
  }

  set distributionCount(value: BigInt) {
    this.set("distributionCount", Value.fromBigInt(value));
  }

  get pendingDistributionAmount(): BigInt {
    let value = this.get("pendingDistributionAmount");
    return value!.toBigInt();
  }

  set pendingDistributionAmount(value: BigInt) {
    this.set("pendingDistributionAmount", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get strategies(): Array<string> {
    let value = this.get("strategies");
    return value!.toStringArray();
  }

  set strategies(value: Array<string>) {
    this.set("strategies", Value.fromStringArray(value));
  }
}

export class UserStrategy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("strategy", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("firstEntered", Value.fromBigInt(BigInt.zero()));
    this.set("lastEntered", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserStrategy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserStrategy entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserStrategy", id.toString(), this);
    }
  }

  static load(id: string): UserStrategy | null {
    return changetype<UserStrategy | null>(store.get("UserStrategy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    return value!.toString();
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get balances(): Array<string> {
    let value = this.get("balances");
    return value!.toStringArray();
  }

  set balances(value: Array<string>) {
    this.set("balances", Value.fromStringArray(value));
  }

  get firstEntered(): BigInt {
    let value = this.get("firstEntered");
    return value!.toBigInt();
  }

  set firstEntered(value: BigInt) {
    this.set("firstEntered", Value.fromBigInt(value));
  }

  get lastEntered(): BigInt {
    let value = this.get("lastEntered");
    return value!.toBigInt();
  }

  set lastEntered(value: BigInt) {
    this.set("lastEntered", Value.fromBigInt(value));
  }

  get exitedSince(): BigInt | null {
    let value = this.get("exitedSince");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exitedSince(value: BigInt | null) {
    if (!value) {
      this.unset("exitedSince");
    } else {
      this.set("exitedSince", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class UserStrategyBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("userStrategy", Value.fromString(""));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserStrategyBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserStrategyBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserStrategyBalance", id.toString(), this);
    }
  }

  static load(id: string): UserStrategyBalance | null {
    return changetype<UserStrategyBalance | null>(
      store.get("UserStrategyBalance", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userStrategy(): string {
    let value = this.get("userStrategy");
    return value!.toString();
  }

  set userStrategy(value: string) {
    this.set("userStrategy", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class DistributionWeighting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("biosBuyBack", Value.fromBigInt(BigInt.zero()));
    this.set("treasury", Value.fromBigInt(BigInt.zero()));
    this.set("protocol", Value.fromBigInt(BigInt.zero()));
    this.set("strategy", Value.fromBigInt(BigInt.zero()));
    this.set("total", Value.fromBigInt(BigInt.zero()));
    this.set("lastUpdatedBlock", Value.fromBigInt(BigInt.zero()));
    this.set("lastUpdatedTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DistributionWeighting entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DistributionWeighting entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DistributionWeighting", id.toString(), this);
    }
  }

  static load(id: string): DistributionWeighting | null {
    return changetype<DistributionWeighting | null>(
      store.get("DistributionWeighting", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get biosBuyBack(): BigInt {
    let value = this.get("biosBuyBack");
    return value!.toBigInt();
  }

  set biosBuyBack(value: BigInt) {
    this.set("biosBuyBack", Value.fromBigInt(value));
  }

  get treasury(): BigInt {
    let value = this.get("treasury");
    return value!.toBigInt();
  }

  set treasury(value: BigInt) {
    this.set("treasury", Value.fromBigInt(value));
  }

  get protocol(): BigInt {
    let value = this.get("protocol");
    return value!.toBigInt();
  }

  set protocol(value: BigInt) {
    this.set("protocol", Value.fromBigInt(value));
  }

  get strategy(): BigInt {
    let value = this.get("strategy");
    return value!.toBigInt();
  }

  set strategy(value: BigInt) {
    this.set("strategy", Value.fromBigInt(value));
  }

  get total(): BigInt {
    let value = this.get("total");
    return value!.toBigInt();
  }

  set total(value: BigInt) {
    this.set("total", Value.fromBigInt(value));
  }

  get lastUpdatedBlock(): BigInt {
    let value = this.get("lastUpdatedBlock");
    return value!.toBigInt();
  }

  set lastUpdatedBlock(value: BigInt) {
    this.set("lastUpdatedBlock", Value.fromBigInt(value));
  }

  get lastUpdatedTime(): BigInt {
    let value = this.get("lastUpdatedTime");
    return value!.toBigInt();
  }

  set lastUpdatedTime(value: BigInt) {
    this.set("lastUpdatedTime", Value.fromBigInt(value));
  }
}
