// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class HarvestYield extends ethereum.Event {
  get params(): HarvestYield__Params {
    return new HarvestYield__Params(this);
  }
}

export class HarvestYield__Params {
  _event: HarvestYield;

  constructor(event: HarvestYield) {
    this._event = event;
  }

  get strategyId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get integration(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class YieldManager__getAllPendingYieldResultPendingYieldDataStruct extends ethereum.Tuple {
  get integration(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }
}

export class YieldManager__getEthDistributionWeightsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class YieldManager__getStrategyInfoResultValue0Struct extends ethereum.Tuple {
  get processedWeth(): BigInt {
    return this[0].toBigInt();
  }

  get distributedWeth(): BigInt {
    return this[1].toBigInt();
  }

  get lastHarvest(): BigInt {
    return this[2].toBigInt();
  }
}

export class YieldManager extends ethereum.SmartContract {
  static bind(address: Address): YieldManager {
    return new YieldManager("YieldManager", address);
  }

  controllers(param0: BigInt): Address {
    let result = super.call("controllers", "controllers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_controllers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "controllers",
      "controllers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllControllers(): Array<Address> {
    let result = super.call(
      "getAllControllers",
      "getAllControllers():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllControllers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllControllers",
      "getAllControllers():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllPendingYield(
    token: Address
  ): Array<YieldManager__getAllPendingYieldResultPendingYieldDataStruct> {
    let result = super.call(
      "getAllPendingYield",
      "getAllPendingYield(address):((address,address,uint256)[])",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toTupleArray<
      YieldManager__getAllPendingYieldResultPendingYieldDataStruct
    >();
  }

  try_getAllPendingYield(
    token: Address
  ): ethereum.CallResult<
    Array<YieldManager__getAllPendingYieldResultPendingYieldDataStruct>
  > {
    let result = super.tryCall(
      "getAllPendingYield",
      "getAllPendingYield(address):((address,address,uint256)[])",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        YieldManager__getAllPendingYieldResultPendingYieldDataStruct
      >()
    );
  }

  getDesiredReserveTokenBalance(tokenAddress: Address): BigInt {
    let result = super.call(
      "getDesiredReserveTokenBalance",
      "getDesiredReserveTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getDesiredReserveTokenBalance(
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDesiredReserveTokenBalance",
      "getDesiredReserveTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEthDistributionWeights(): YieldManager__getEthDistributionWeightsResult {
    let result = super.call(
      "getEthDistributionWeights",
      "getEthDistributionWeights():(uint32,uint32,uint32,uint32)",
      []
    );

    return new YieldManager__getEthDistributionWeightsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getEthDistributionWeights(): ethereum.CallResult<
    YieldManager__getEthDistributionWeightsResult
  > {
    let result = super.tryCall(
      "getEthDistributionWeights",
      "getEthDistributionWeights():(uint32,uint32,uint32,uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldManager__getEthDistributionWeightsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getEthWeightSum(): BigInt {
    let result = super.call(
      "getEthWeightSum",
      "getEthWeightSum():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEthWeightSum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEthWeightSum",
      "getEthWeightSum():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGasAccount(): Address {
    let result = super.call("getGasAccount", "getGasAccount():(address)", []);

    return result[0].toAddress();
  }

  try_getGasAccount(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGasAccount",
      "getGasAccount():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGasAccountTargetEthBalance(): BigInt {
    let result = super.call(
      "getGasAccountTargetEthBalance",
      "getGasAccountTargetEthBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getGasAccountTargetEthBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGasAccountTargetEthBalance",
      "getGasAccountTargetEthBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastEthRewardsAmount(): BigInt {
    let result = super.call(
      "getLastEthRewardsAmount",
      "getLastEthRewardsAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastEthRewardsAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastEthRewardsAmount",
      "getLastEthRewardsAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastHarvestYieldTimestamp(integrationAddress: Address): BigInt {
    let result = super.call(
      "getLastHarvestYieldTimestamp",
      "getLastHarvestYieldTimestamp(address):(uint256)",
      [ethereum.Value.fromAddress(integrationAddress)]
    );

    return result[0].toBigInt();
  }

  try_getLastHarvestYieldTimestamp(
    integrationAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastHarvestYieldTimestamp",
      "getLastHarvestYieldTimestamp(address):(uint256)",
      [ethereum.Value.fromAddress(integrationAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveTokenBalance(tokenAddress: Address): BigInt {
    let result = super.call(
      "getReserveTokenBalance",
      "getReserveTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getReserveTokenBalance(
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveTokenBalance",
      "getReserveTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStrategyInfo(
    strategyId: BigInt
  ): YieldManager__getStrategyInfoResultValue0Struct {
    let result = super.call(
      "getStrategyInfo",
      "getStrategyInfo(uint256):((uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(strategyId)]
    );

    return changetype<YieldManager__getStrategyInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getStrategyInfo(
    strategyId: BigInt
  ): ethereum.CallResult<YieldManager__getStrategyInfoResultValue0Struct> {
    let result = super.tryCall(
      "getStrategyInfo",
      "getStrategyInfo(uint256):((uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(strategyId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<YieldManager__getStrategyInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getTokenTotalIntegrationBalance(tokenAddress: Address): BigInt {
    let result = super.call(
      "getTokenTotalIntegrationBalance",
      "getTokenTotalIntegrationBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getTokenTotalIntegrationBalance(
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenTotalIntegrationBalance",
      "getTokenTotalIntegrationBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTreasuryAccount(): Address {
    let result = super.call(
      "getTreasuryAccount",
      "getTreasuryAccount():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTreasuryAccount(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTreasuryAccount",
      "getTreasuryAccount():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isController(controller: Address): boolean {
    let result = super.call("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(controller)
    ]);

    return result[0].toBoolean();
  }

  try_isController(controller: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(controller)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  moduleMap(): Address {
    let result = super.call("moduleMap", "moduleMap():(address)", []);

    return result[0].toAddress();
  }

  try_moduleMap(): ethereum.CallResult<Address> {
    let result = super.tryCall("moduleMap", "moduleMap():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddControllerCall extends ethereum.Call {
  get inputs(): AddControllerCall__Inputs {
    return new AddControllerCall__Inputs(this);
  }

  get outputs(): AddControllerCall__Outputs {
    return new AddControllerCall__Outputs(this);
  }
}

export class AddControllerCall__Inputs {
  _call: AddControllerCall;

  constructor(call: AddControllerCall) {
    this._call = call;
  }

  get controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddControllerCall__Outputs {
  _call: AddControllerCall;

  constructor(call: AddControllerCall) {
    this._call = call;
  }
}

export class BiosBuyBackCall extends ethereum.Call {
  get inputs(): BiosBuyBackCall__Inputs {
    return new BiosBuyBackCall__Inputs(this);
  }

  get outputs(): BiosBuyBackCall__Outputs {
    return new BiosBuyBackCall__Outputs(this);
  }
}

export class BiosBuyBackCall__Inputs {
  _call: BiosBuyBackCall;

  constructor(call: BiosBuyBackCall) {
    this._call = call;
  }

  get ratioX1000(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BiosBuyBackCall__Outputs {
  _call: BiosBuyBackCall;

  constructor(call: BiosBuyBackCall) {
    this._call = call;
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get deployments(): Array<DeployCallDeploymentsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      DeployCallDeploymentsStruct
    >();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }
}

export class DeployCallDeploymentsStruct extends ethereum.Tuple {
  get integration(): Address {
    return this[0].toAddress();
  }

  get tokens(): Array<Address> {
    return this[1].toAddressArray();
  }

  get ammPoolID(): BigInt {
    return this[2].toBigInt();
  }
}

export class DistributeEthCall extends ethereum.Call {
  get inputs(): DistributeEthCall__Inputs {
    return new DistributeEthCall__Inputs(this);
  }

  get outputs(): DistributeEthCall__Outputs {
    return new DistributeEthCall__Outputs(this);
  }
}

export class DistributeEthCall__Inputs {
  _call: DistributeEthCall;

  constructor(call: DistributeEthCall) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get positions(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get biosAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DistributeEthCall__Outputs {
  _call: DistributeEthCall;

  constructor(call: DistributeEthCall) {
    this._call = call;
  }
}

export class HarvestYieldCall extends ethereum.Call {
  get inputs(): HarvestYieldCall__Inputs {
    return new HarvestYieldCall__Inputs(this);
  }

  get outputs(): HarvestYieldCall__Outputs {
    return new HarvestYieldCall__Outputs(this);
  }
}

export class HarvestYieldCall__Inputs {
  _call: HarvestYieldCall;

  constructor(call: HarvestYieldCall) {
    this._call = call;
  }

  get strategyId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get integrations(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get setAccounting(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class HarvestYieldCall__Outputs {
  _call: HarvestYieldCall;

  constructor(call: HarvestYieldCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get controllers_(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get moduleMap_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get gasAccountTargetEthBalance_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get biosBuyBackEthWeight_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get treasuryEthWeight_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get protocolFeeEthWeight_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get rewardsEthWeight_(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get gasAccount_(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get treasuryAccount_(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class StrategyAccountingCall extends ethereum.Call {
  get inputs(): StrategyAccountingCall__Inputs {
    return new StrategyAccountingCall__Inputs(this);
  }

  get outputs(): StrategyAccountingCall__Outputs {
    return new StrategyAccountingCall__Outputs(this);
  }
}

export class StrategyAccountingCall__Inputs {
  _call: StrategyAccountingCall;

  constructor(call: StrategyAccountingCall) {
    this._call = call;
  }

  get strategyId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get add(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class StrategyAccountingCall__Outputs {
  _call: StrategyAccountingCall;

  constructor(call: StrategyAccountingCall) {
    this._call = call;
  }
}

export class TransferClosedPositionsValueCall extends ethereum.Call {
  get inputs(): TransferClosedPositionsValueCall__Inputs {
    return new TransferClosedPositionsValueCall__Inputs(this);
  }

  get outputs(): TransferClosedPositionsValueCall__Outputs {
    return new TransferClosedPositionsValueCall__Outputs(this);
  }
}

export class TransferClosedPositionsValueCall__Inputs {
  _call: TransferClosedPositionsValueCall;

  constructor(call: TransferClosedPositionsValueCall) {
    this._call = call;
  }

  get destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferClosedPositionsValueCall__Outputs {
  _call: TransferClosedPositionsValueCall;

  constructor(call: TransferClosedPositionsValueCall) {
    this._call = call;
  }
}

export class UpdateEthDistributionWeightsCall extends ethereum.Call {
  get inputs(): UpdateEthDistributionWeightsCall__Inputs {
    return new UpdateEthDistributionWeightsCall__Inputs(this);
  }

  get outputs(): UpdateEthDistributionWeightsCall__Outputs {
    return new UpdateEthDistributionWeightsCall__Outputs(this);
  }
}

export class UpdateEthDistributionWeightsCall__Inputs {
  _call: UpdateEthDistributionWeightsCall;

  constructor(call: UpdateEthDistributionWeightsCall) {
    this._call = call;
  }

  get biosBuyBackEthWeight_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get treasuryEthWeight_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get protocolFeeEthWeight_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get rewardsEthWeight_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateEthDistributionWeightsCall__Outputs {
  _call: UpdateEthDistributionWeightsCall;

  constructor(call: UpdateEthDistributionWeightsCall) {
    this._call = call;
  }
}

export class UpdateGasAccountCall extends ethereum.Call {
  get inputs(): UpdateGasAccountCall__Inputs {
    return new UpdateGasAccountCall__Inputs(this);
  }

  get outputs(): UpdateGasAccountCall__Outputs {
    return new UpdateGasAccountCall__Outputs(this);
  }
}

export class UpdateGasAccountCall__Inputs {
  _call: UpdateGasAccountCall;

  constructor(call: UpdateGasAccountCall) {
    this._call = call;
  }

  get gasAccount_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateGasAccountCall__Outputs {
  _call: UpdateGasAccountCall;

  constructor(call: UpdateGasAccountCall) {
    this._call = call;
  }
}

export class UpdateGasAccountTargetEthBalanceCall extends ethereum.Call {
  get inputs(): UpdateGasAccountTargetEthBalanceCall__Inputs {
    return new UpdateGasAccountTargetEthBalanceCall__Inputs(this);
  }

  get outputs(): UpdateGasAccountTargetEthBalanceCall__Outputs {
    return new UpdateGasAccountTargetEthBalanceCall__Outputs(this);
  }
}

export class UpdateGasAccountTargetEthBalanceCall__Inputs {
  _call: UpdateGasAccountTargetEthBalanceCall;

  constructor(call: UpdateGasAccountTargetEthBalanceCall) {
    this._call = call;
  }

  get gasAccountTargetEthBalance_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateGasAccountTargetEthBalanceCall__Outputs {
  _call: UpdateGasAccountTargetEthBalanceCall;

  constructor(call: UpdateGasAccountTargetEthBalanceCall) {
    this._call = call;
  }
}

export class UpdateTreasuryAccountCall extends ethereum.Call {
  get inputs(): UpdateTreasuryAccountCall__Inputs {
    return new UpdateTreasuryAccountCall__Inputs(this);
  }

  get outputs(): UpdateTreasuryAccountCall__Outputs {
    return new UpdateTreasuryAccountCall__Outputs(this);
  }
}

export class UpdateTreasuryAccountCall__Inputs {
  _call: UpdateTreasuryAccountCall;

  constructor(call: UpdateTreasuryAccountCall) {
    this._call = call;
  }

  get treasuryAccount_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTreasuryAccountCall__Outputs {
  _call: UpdateTreasuryAccountCall;

  constructor(call: UpdateTreasuryAccountCall) {
    this._call = call;
  }
}
