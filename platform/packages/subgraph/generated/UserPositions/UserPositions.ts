// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get tokenAmounts(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EnterStrategy extends ethereum.Event {
  get params(): EnterStrategy__Params {
    return new EnterStrategy__Params(this);
  }
}

export class EnterStrategy__Params {
  _event: EnterStrategy;

  constructor(event: EnterStrategy) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): Array<EnterStrategyTokensStruct> {
    return this._event.parameters[2].value.toTupleArray<
      EnterStrategyTokensStruct
    >();
  }
}

export class EnterStrategyTokensStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class ExitStrategy extends ethereum.Event {
  get params(): ExitStrategy__Params {
    return new ExitStrategy__Params(this);
  }
}

export class ExitStrategy__Params {
  _event: ExitStrategy;

  constructor(event: ExitStrategy) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): Array<ExitStrategyTokensStruct> {
    return this._event.parameters[2].value.toTupleArray<
      ExitStrategyTokensStruct
    >();
  }
}

export class ExitStrategyTokensStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class Pause extends ethereum.Event {
  get params(): Pause__Params {
    return new Pause__Params(this);
  }
}

export class Pause__Params {
  _event: Pause;

  constructor(event: Pause) {
    this._event = event;
  }

  get isPaused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class UserPositions__getUserBalancesResultStrategyBalanceStruct extends ethereum.Tuple {
  get strategyID(): BigInt {
    return this[0].toBigInt();
  }

  get tokens(): Array<
    UserPositions__getUserBalancesResultStrategyBalanceTokensStruct
  > {
    return this[1].toTupleArray<
      UserPositions__getUserBalancesResultStrategyBalanceTokensStruct
    >();
  }
}

export class UserPositions__getUserBalancesResultStrategyBalanceTokensStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }
}

export class UserPositions__getUserBalancesResultUserBalanceStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }
}

export class UserPositions__getUserBalancesResult {
  value0: Array<UserPositions__getUserBalancesResultStrategyBalanceStruct>;
  value1: Array<UserPositions__getUserBalancesResultUserBalanceStruct>;

  constructor(
    value0: Array<UserPositions__getUserBalancesResultStrategyBalanceStruct>,
    value1: Array<UserPositions__getUserBalancesResultUserBalanceStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }
}

export class UserPositions__withdrawAllAndClaimResult_withdrawAllAndClaimResponseStruct extends ethereum.Tuple {
  get tokenAmounts(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get ethWithdrawn(): BigInt {
    return this[1].toBigInt();
  }

  get ethClaimed(): BigInt {
    return this[2].toBigInt();
  }

  get biosClaimed(): BigInt {
    return this[3].toBigInt();
  }
}

export class UserPositions extends ethereum.SmartContract {
  static bind(address: Address): UserPositions {
    return new UserPositions("UserPositions", address);
  }

  claimEthRewards(recipient: Address, strategies: Array<BigInt>): BigInt {
    let result = super.call(
      "claimEthRewards",
      "claimEthRewards(address,uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(strategies)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimEthRewards(
    recipient: Address,
    strategies: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimEthRewards",
      "claimEthRewards(address,uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(strategies)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controllers(param0: BigInt): Address {
    let result = super.call("controllers", "controllers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_controllers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "controllers",
      "controllers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllControllers(): Array<Address> {
    let result = super.call(
      "getAllControllers",
      "getAllControllers():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllControllers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllControllers",
      "getAllControllers():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getUserBalances(
    user: Address,
    _strategies: Array<BigInt>,
    _tokens: Array<Address>
  ): UserPositions__getUserBalancesResult {
    let result = super.call(
      "getUserBalances",
      "getUserBalances(address,uint256[],address[]):((uint256,(address,uint256)[])[],(address,uint256)[])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigIntArray(_strategies),
        ethereum.Value.fromAddressArray(_tokens)
      ]
    );

    return new UserPositions__getUserBalancesResult(
      result[0].toTupleArray<
        UserPositions__getUserBalancesResultStrategyBalanceStruct
      >(),
      result[1].toTupleArray<
        UserPositions__getUserBalancesResultUserBalanceStruct
      >()
    );
  }

  try_getUserBalances(
    user: Address,
    _strategies: Array<BigInt>,
    _tokens: Array<Address>
  ): ethereum.CallResult<UserPositions__getUserBalancesResult> {
    let result = super.tryCall(
      "getUserBalances",
      "getUserBalances(address,uint256[],address[]):((uint256,(address,uint256)[])[],(address,uint256)[])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigIntArray(_strategies),
        ethereum.Value.fromAddressArray(_tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UserPositions__getUserBalancesResult(
        value[0].toTupleArray<
          UserPositions__getUserBalancesResultStrategyBalanceStruct
        >(),
        value[1].toTupleArray<
          UserPositions__getUserBalancesResultUserBalanceStruct
        >()
      )
    );
  }

  getUserInvestedAmountByToken(token: Address, user: Address): BigInt {
    let result = super.call(
      "getUserInvestedAmountByToken",
      "getUserInvestedAmountByToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getUserInvestedAmountByToken(
    token: Address,
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserInvestedAmountByToken",
      "getUserInvestedAmountByToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserStrategyBalanceByToken(
    id: BigInt,
    token: Address,
    user: Address
  ): BigInt {
    let result = super.call(
      "getUserStrategyBalanceByToken",
      "getUserStrategyBalanceByToken(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBigInt();
  }

  try_getUserStrategyBalanceByToken(
    id: BigInt,
    token: Address,
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserStrategyBalanceByToken",
      "getUserStrategyBalanceByToken(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isController(controller: Address): boolean {
    let result = super.call("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(controller)
    ]);

    return result[0].toBoolean();
  }

  try_isController(controller: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(controller)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  moduleMap(): Address {
    let result = super.call("moduleMap", "moduleMap():(address)", []);

    return result[0].toAddress();
  }

  try_moduleMap(): ethereum.CallResult<Address> {
    let result = super.tryCall("moduleMap", "moduleMap():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalTokenBalance(asset: Address): BigInt {
    let result = super.call(
      "totalTokenBalance",
      "totalTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBigInt();
  }

  try_totalTokenBalance(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTokenBalance",
      "totalTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userDeployableBalance(asset: Address, account: Address): BigInt {
    let result = super.call(
      "userDeployableBalance",
      "userDeployableBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_userDeployableBalance(
    asset: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userDeployableBalance",
      "userDeployableBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInterconnectBalance(asset: Address, account: Address): BigInt {
    let result = super.call(
      "userInterconnectBalance",
      "userInterconnectBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_userInterconnectBalance(
    asset: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userInterconnectBalance",
      "userInterconnectBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userTokenBalance(asset: Address, account: Address): BigInt {
    let result = super.call(
      "userTokenBalance",
      "userTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_userTokenBalance(
    asset: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userTokenBalance",
      "userTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(
    recipient: Address,
    tokens: Array<Address>,
    amounts: Array<BigInt>,
    withdrawWethAsEth: boolean
  ): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(address,address[],uint256[],bool):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromBoolean(withdrawWethAsEth)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    recipient: Address,
    tokens: Array<Address>,
    amounts: Array<BigInt>,
    withdrawWethAsEth: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(address,address[],uint256[],bool):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromBoolean(withdrawWethAsEth)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawAllAndClaim(
    recipient: Address,
    tokens: Array<Address>,
    strategies: Array<BigInt>,
    withdrawWethAsEth: boolean
  ): UserPositions__withdrawAllAndClaimResult_withdrawAllAndClaimResponseStruct {
    let result = super.call(
      "withdrawAllAndClaim",
      "withdrawAllAndClaim(address,address[],uint256[],bool):((uint256[],uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(strategies),
        ethereum.Value.fromBoolean(withdrawWethAsEth)
      ]
    );

    return changetype<
      UserPositions__withdrawAllAndClaimResult_withdrawAllAndClaimResponseStruct
    >(result[0].toTuple());
  }

  try_withdrawAllAndClaim(
    recipient: Address,
    tokens: Array<Address>,
    strategies: Array<BigInt>,
    withdrawWethAsEth: boolean
  ): ethereum.CallResult<
    UserPositions__withdrawAllAndClaimResult_withdrawAllAndClaimResponseStruct
  > {
    let result = super.tryCall(
      "withdrawAllAndClaim",
      "withdrawAllAndClaim(address,address[],uint256[],bool):((uint256[],uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(strategies),
        ethereum.Value.fromBoolean(withdrawWethAsEth)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<
        UserPositions__withdrawAllAndClaimResult_withdrawAllAndClaimResponseStruct
      >(value[0].toTuple())
    );
  }
}

export class _remoteStrategyExecutionCall extends ethereum.Call {
  get inputs(): _remoteStrategyExecutionCall__Inputs {
    return new _remoteStrategyExecutionCall__Inputs(this);
  }

  get outputs(): _remoteStrategyExecutionCall__Outputs {
    return new _remoteStrategyExecutionCall__Outputs(this);
  }
}

export class _remoteStrategyExecutionCall__Inputs {
  _call: _remoteStrategyExecutionCall;

  constructor(call: _remoteStrategyExecutionCall) {
    this._call = call;
  }

  get strategyID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokens(): Array<_remoteStrategyExecutionCallTokensStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      _remoteStrategyExecutionCallTokensStruct
    >();
  }

  get enterStrat(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class _remoteStrategyExecutionCall__Outputs {
  _call: _remoteStrategyExecutionCall;

  constructor(call: _remoteStrategyExecutionCall) {
    this._call = call;
  }
}

export class _remoteStrategyExecutionCallTokensStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class AddControllerCall extends ethereum.Call {
  get inputs(): AddControllerCall__Inputs {
    return new AddControllerCall__Inputs(this);
  }

  get outputs(): AddControllerCall__Outputs {
    return new AddControllerCall__Outputs(this);
  }
}

export class AddControllerCall__Inputs {
  _call: AddControllerCall;

  constructor(call: AddControllerCall) {
    this._call = call;
  }

  get controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddControllerCall__Outputs {
  _call: AddControllerCall;

  constructor(call: AddControllerCall) {
    this._call = call;
  }
}

export class AirdropCall extends ethereum.Call {
  get inputs(): AirdropCall__Inputs {
    return new AirdropCall__Inputs(this);
  }

  get outputs(): AirdropCall__Outputs {
    return new AirdropCall__Outputs(this);
  }
}

export class AirdropCall__Inputs {
  _call: AirdropCall;

  constructor(call: AirdropCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get users(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class AirdropCall__Outputs {
  _call: AirdropCall;

  constructor(call: AirdropCall) {
    this._call = call;
  }
}

export class ClaimEthRewardsCall extends ethereum.Call {
  get inputs(): ClaimEthRewardsCall__Inputs {
    return new ClaimEthRewardsCall__Inputs(this);
  }

  get outputs(): ClaimEthRewardsCall__Outputs {
    return new ClaimEthRewardsCall__Outputs(this);
  }
}

export class ClaimEthRewardsCall__Inputs {
  _call: ClaimEthRewardsCall;

  constructor(call: ClaimEthRewardsCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get strategies(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ClaimEthRewardsCall__Outputs {
  _call: ClaimEthRewardsCall;

  constructor(call: ClaimEthRewardsCall) {
    this._call = call;
  }

  get ethClaimed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get depositor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get ethAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get migration(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EnterStrategyCall extends ethereum.Call {
  get inputs(): EnterStrategyCall__Inputs {
    return new EnterStrategyCall__Inputs(this);
  }

  get outputs(): EnterStrategyCall__Outputs {
    return new EnterStrategyCall__Outputs(this);
  }
}

export class EnterStrategyCall__Inputs {
  _call: EnterStrategyCall;

  constructor(call: EnterStrategyCall) {
    this._call = call;
  }

  get strategyID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokens(): Array<EnterStrategyCallTokensStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      EnterStrategyCallTokensStruct
    >();
  }
}

export class EnterStrategyCall__Outputs {
  _call: EnterStrategyCall;

  constructor(call: EnterStrategyCall) {
    this._call = call;
  }
}

export class EnterStrategyCallTokensStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class ExitStrategyCall extends ethereum.Call {
  get inputs(): ExitStrategyCall__Inputs {
    return new ExitStrategyCall__Inputs(this);
  }

  get outputs(): ExitStrategyCall__Outputs {
    return new ExitStrategyCall__Outputs(this);
  }
}

export class ExitStrategyCall__Inputs {
  _call: ExitStrategyCall;

  constructor(call: ExitStrategyCall) {
    this._call = call;
  }

  get strategyID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokens(): Array<ExitStrategyCallTokensStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      ExitStrategyCallTokensStruct
    >();
  }
}

export class ExitStrategyCall__Outputs {
  _call: ExitStrategyCall;

  constructor(call: ExitStrategyCall) {
    this._call = call;
  }
}

export class ExitStrategyCallTokensStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get controllers_(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get moduleMap_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateUserInterconnectBalancesCall extends ethereum.Call {
  get inputs(): UpdateUserInterconnectBalancesCall__Inputs {
    return new UpdateUserInterconnectBalancesCall__Inputs(this);
  }

  get outputs(): UpdateUserInterconnectBalancesCall__Outputs {
    return new UpdateUserInterconnectBalancesCall__Outputs(this);
  }
}

export class UpdateUserInterconnectBalancesCall__Inputs {
  _call: UpdateUserInterconnectBalancesCall;

  constructor(call: UpdateUserInterconnectBalancesCall) {
    this._call = call;
  }

  get assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get add(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }
}

export class UpdateUserInterconnectBalancesCall__Outputs {
  _call: UpdateUserInterconnectBalancesCall;

  constructor(call: UpdateUserInterconnectBalancesCall) {
    this._call = call;
  }
}

export class UpdateUserTokenBalancesCall extends ethereum.Call {
  get inputs(): UpdateUserTokenBalancesCall__Inputs {
    return new UpdateUserTokenBalancesCall__Inputs(this);
  }

  get outputs(): UpdateUserTokenBalancesCall__Outputs {
    return new UpdateUserTokenBalancesCall__Outputs(this);
  }
}

export class UpdateUserTokenBalancesCall__Inputs {
  _call: UpdateUserTokenBalancesCall;

  constructor(call: UpdateUserTokenBalancesCall) {
    this._call = call;
  }

  get assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get add(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }
}

export class UpdateUserTokenBalancesCall__Outputs {
  _call: UpdateUserTokenBalancesCall;

  constructor(call: UpdateUserTokenBalancesCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get withdrawWethAsEth(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get ethWithdrawn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawAllAndClaimCall extends ethereum.Call {
  get inputs(): WithdrawAllAndClaimCall__Inputs {
    return new WithdrawAllAndClaimCall__Inputs(this);
  }

  get outputs(): WithdrawAllAndClaimCall__Outputs {
    return new WithdrawAllAndClaimCall__Outputs(this);
  }
}

export class WithdrawAllAndClaimCall__Inputs {
  _call: WithdrawAllAndClaimCall;

  constructor(call: WithdrawAllAndClaimCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get strategies(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get withdrawWethAsEth(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class WithdrawAllAndClaimCall__Outputs {
  _call: WithdrawAllAndClaimCall;

  constructor(call: WithdrawAllAndClaimCall) {
    this._call = call;
  }

  get _withdrawAllAndClaimResponse(): WithdrawAllAndClaimCall_withdrawAllAndClaimResponseStruct {
    return changetype<
      WithdrawAllAndClaimCall_withdrawAllAndClaimResponseStruct
    >(this._call.outputValues[0].value.toTuple());
  }
}

export class WithdrawAllAndClaimCall_withdrawAllAndClaimResponseStruct extends ethereum.Tuple {
  get tokenAmounts(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get ethWithdrawn(): BigInt {
    return this[1].toBigInt();
  }

  get ethClaimed(): BigInt {
    return this[2].toBigInt();
  }

  get biosClaimed(): BigInt {
    return this[3].toBigInt();
  }
}
